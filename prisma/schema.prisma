// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  password        String
  createdAt       DateTime @default(now())
  workouts        Workout[]
  exercises       Exercise[]
  workoutSessions WorkoutSession[]

  @@map("users")
}

model Exercise {
  id        Int         @id @default(autoincrement())
  name      String
  category  MuscleGroup
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user                   User                     @relation(fields: [userId], references: [id])
  workoutExercises       WorkoutExercise[]
  workoutSessionExercises WorkoutSessionExercise[]

  @@map("exercises")
}

// FICHA DE TREINO (template/planejamento)
model Workout {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User              @relation(fields: [userId], references: [id])
  exercises       WorkoutExercise[]
  workoutSessions WorkoutSession[]

  @@map("workouts")
}

// EXERCÍCIOS DA FICHA (planejamento - dados gerais)
model WorkoutExercise {
  id         Int      @id @default(autoincrement())
  workoutId  Int
  exerciseId Int
  sets       Int
  reps       Int
  weight     Float
  restTime   Int?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  workout  Workout  @relation(fields: [workoutId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@map("workout_exercises")
}

// TREINO EXECUTADO (sessão real)
model WorkoutSession {
  id        Int       @id @default(autoincrement())
  workoutId Int
  userId    Int
  startTime DateTime
  endTime   DateTime?
  totalTime Int?
  notes     String?
  createdAt DateTime  @default(now())

  workout   Workout                  @relation(fields: [workoutId], references: [id])
  user      User                     @relation(fields: [userId], references: [id])
  exercises WorkoutSessionExercise[] 

  @@map("workout_sessions")
}

// EXERCÍCIOS EXECUTADOS (dados reais de cada série)
model WorkoutSessionExercise {
  id                Int      @id @default(autoincrement())
  workoutSessionId  Int
  exerciseId        Int
  workoutExerciseId Int
  setNumber         Int
  reps              Int
  weight            Float
  restTime          Int?
  notes             String?
  createdAt         DateTime @default(now())

  workoutSession WorkoutSession @relation(fields: [workoutSessionId], references: [id])
  exercise       Exercise       @relation(fields: [exerciseId], references: [id])

  @@map("workout_session_exercises")
}

enum MuscleGroup {
  Abs
  Back
  Chest
  Shoulders
  Biceps
  Triceps
  Legs
  Cardio
}
